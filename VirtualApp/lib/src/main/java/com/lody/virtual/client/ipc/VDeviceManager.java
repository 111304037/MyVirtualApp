package com.lody.virtual.client.ipc;

import android.annotation.SuppressLint;
import android.os.Build;
import android.os.RemoteException;
import android.text.TextUtils;

import com.lody.virtual.client.env.VirtualRuntime;
import com.lody.virtual.helper.utils.IInterfaceUtils;
import com.lody.virtual.helper.utils.PropertiesUtils;
import com.lody.virtual.remote.VDeviceInfo;
import com.lody.virtual.server.interfaces.IDeviceInfoManager;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import mirror.RefStaticObject;

/**
 * @author Lody
 */

public class VDeviceManager {
    public static final int MOCK_MODE_NONE = 0;
    public static final int MOCK_MODE_USER = 1;
    public static final int MOCK_MODE_APP = 2;

    private static final VDeviceManager sInstance = new VDeviceManager();

    public static VDeviceManager get() {
        return sInstance;
    }

    private IDeviceInfoManager mService;

    public IDeviceInfoManager getService() {
        if (mService == null || !IInterfaceUtils.isAlive(mService)) {
            synchronized (this) {
                Object binder = getRemoteInterface();
                mService = LocalProxyUtils.genProxy(IDeviceInfoManager.class, binder);
            }
        }
        return mService;
    }

    private Object getRemoteInterface() {
        return IDeviceInfoManager.Stub
                .asInterface(ServiceManagerNative.getService(ServiceManagerNative.DEVICE));
    }


    public VDeviceInfo getDeviceInfo(int userId) {
        try {
            return getService().getDeviceInfo(userId);
        } catch (RemoteException e) {
            return VirtualRuntime.crash(e);
        }
    }

    public void updateDeviceInfo(int userId, VDeviceInfo deviceInfo) {
        try {
            getService().updateDeviceInfo(userId, deviceInfo);
        } catch (RemoteException e) {
            VirtualRuntime.crash(e);
        }
    }

    private void setBuild(RefStaticObject<String> field, String key, Map<String,String> keyValues){
        String val = keyValues.get(key);
        if(!TextUtils.isEmpty(val)){
            field.set(val);
        }
    }

    public void attachBuildProp(File build, String packageName, int userId){
        VDeviceInfo deviceInfo = getDeviceInfo(userId);
        mirror.android.os.Build.SERIAL.set(deviceInfo.getSerial());
        mirror.android.os.Build.DEVICE.set(Build.DEVICE.replace(" ", "_"));

        Map<String,String> keyValues = VDeviceManager.get().getMockConfig(userId, packageName, true);
        if (keyValues == null || keyValues.size() == 0) {
            return;
        }
        if(!build.exists()){
            //save
            PropertiesUtils.save(keyValues, build, " begin build properties\n# autogenerated by buildinfo.sh");
        }
        setBuild(mirror.android.os.Build.DEVICE, "ro.product.device", keyValues);
        setBuild(mirror.android.os.Build.SERIAL, "no.such.thing", keyValues);
        setBuild(mirror.android.os.Build.MODEL, "ro.product.model", keyValues);
        setBuild(mirror.android.os.Build.BRAND, "ro.product.brand", keyValues);
        setBuild(mirror.android.os.Build.BOARD, "ro.product.board", keyValues);
        setBuild(mirror.android.os.Build.PRODUCT, "ro.product.name", keyValues);
        setBuild(mirror.android.os.Build.ID, "ro.build.id", keyValues);
        setBuild(mirror.android.os.Build.DISPLAY, "ro.build.display.id", keyValues);
        setBuild(mirror.android.os.Build.MANUFACTURER, "ro.product.manufacturer", keyValues);
        setBuild(mirror.android.os.Build.FINGERPRINT, "ro.build.fingerprint", keyValues);
    }

    public Map<String, String> getGlobalMockConfig(int userId) {
        return getMockConfig(userId, null, false);
    }

    public void updateGlobalMockConfig(int userId, HashMap<String, String> map) {
        updateMockConfig(userId, null, map);
    }

    @SuppressWarnings("unchecked")
    public Map<String, String> getMockConfig(int userId, String packageName, boolean auto) {
        try {
            return (Map<String, String>) getService().getMockConfig(userId, packageName, auto);
        } catch (RemoteException e) {
            return VirtualRuntime.crash(e);
        }
    }

    public void updateMockConfig(int userId, String packageName, HashMap<String, String> map) {
        try {
            getService().setMockConfig(userId, packageName, map);
        } catch (RemoteException e) {
            VirtualRuntime.crash(e);
        }
    }

    public int getMockMode(int userId, String packageName){
        try {
            return getService().getMockMode(userId, packageName);
        } catch (RemoteException e) {
            return VirtualRuntime.crash(e);
        }
    }

    public void removeMockConfig(int userId, String packageName){
        try {
            getService().removeMockConfig(userId, packageName);
        } catch (RemoteException e) {
            VirtualRuntime.crash(e);
        }
    }

    public Editor createAppBuildEditor(String packageName, int userId) {
        return new Editor(userId, packageName);
    }

    /**
     * @deprecated
     * @see #createSystemBuildEditor
     * @see #createAppBuildEditor
     */
    public Editor createBuildEditor(int userId){
        return createSystemBuildEditor(userId);
    }

    public Editor createSystemBuildEditor(int userId) {
        return new Editor(userId, null);
    }

    public static class Editor {
        private boolean reset;
        private int userId;
        private String packageName;
        private final HashMap<String, String> mBuilds= new HashMap<>();
        public Editor(int userId, String packageName) {
            this.userId = userId;
            this.packageName = packageName;
        }

        public void reload() {
            Map<String, String> values = VDeviceManager.get().getMockConfig(userId, packageName, false);
            mBuilds.clear();
            if (values != null) {
                mBuilds.putAll(values);
            }
        }

        public boolean save() {
            if (reset) {
                VDeviceManager.get().removeMockConfig(userId, packageName);
            } else {
                VDeviceManager.get().updateMockConfig(userId, packageName, mBuilds);
            }
            return true;
        }

        private void setBuild(String value, String key){
            mBuilds.put(key, value);
        }

        public void setDefault() {
            setDefault("/system/build.prop");
        }

        public boolean hasDefault() {
            return size() > 0;
        }

        public int size() {
            return mBuilds.size();
        }

        public void setDefault(String path) {
            mBuilds.clear();
            Properties system = new Properties();
            if (path != null && PropertiesUtils.load(system, new File(path))) {
                for (Map.Entry<Object, Object> e : system.entrySet()) {
                    String k = String.valueOf(e.getKey());
                    String v = e.getValue() == null ? "" : String.valueOf(e.getValue());
                    mBuilds.put(k, v);
                }
            } else {
                setBrand(Build.BRAND);
                setBoard(Build.BOARD);
                setProduct(Build.PRODUCT);
                setDevice(Build.DEVICE);
                setID(Build.ID);
                setDisplay(Build.DISPLAY);
                setSerial(Build.SERIAL);
                setManufacturer(Build.MANUFACTURER);
                setModel(Build.MODEL);
                setFingerprint(null);
            }
        }

        public boolean exists() {
            return size() > 0;
        }

        public void reset(boolean save) {
            reset = true;
            mBuilds.clear();
            setDefault();
            if (save) {
                save();
            }
        }

        public void setModel(String brand) {
            set("ro.product.model", brand);
        }

        public String getModel() {
            return get("ro.product.model", Build.MODEL);
        }

        public void setBrand(String brand) {
            set("ro.product.brand", brand);
        }

        public String getBrand() {
            return get("ro.product.brand", Build.BRAND);
        }

        public void setBoard(String broad) {
            set("ro.product.board", broad);
        }

        public String getBoard() {
            return get("ro.product.board", Build.BOARD);
        }

        public void setProduct(String product) {
            set("ro.product.name", product);
        }

        public String getProduct() {
            return get("ro.product.name", Build.PRODUCT);
        }

        public void setDevice(String device) {
            set("ro.product.device", device);
        }

        public String getDevice() {
            return get("ro.product.device", Build.DEVICE);
        }

        public void setManufacturer(String device) {
            set("ro.product.manufacturer", device);
        }

        public String getManufacturer() {
            return get("ro.product.manufacturer", Build.MANUFACTURER);
        }

        public String genFingerprint() {
            return getBrand() + '/' +
                    getProduct() + '/' +
                    getDevice() + ':' +
                    getID();
        }

        public void setFingerprint(String device) {
            set("ro.build.fingerprint", device);
        }

        public String getFingerprint() {
            return get("ro.build.fingerprint", Build.FINGERPRINT);
        }

        public void setID(String id) {
            set("ro.build.id", id);
        }

        public String getID() {
            return get("ro.build.id", Build.ID);
        }

        public void setDisplay(String displayid) {
            set("ro.build.display.id", displayid);
        }

        public String getDisplay() {
            return get("ro.build.display.id", Build.DISPLAY);
        }

        public void setSerial(String serial) {
            set("no.such.thing", serial);
        }

        @SuppressLint("HardwareIds")
        public String getSerial() {
            return get("no.such.thing", Build.SERIAL);
        }

        public String get(String key, String def) {
            String value = mBuilds.get(key);
            if(value == null){
                return def;
            }
            return value;
        }

        public void set(String key, String value) {
            reset = false;
            if (value == null) {
                value = "";
            }
            mBuilds.put(key, value);
        }

    }
}
